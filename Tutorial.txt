Lógica de programação
- variáveis
- operadores
- algorítmo
- estruturas de controle
- POO
- estruturas de dados

GIT e GITHUB  (GIT é instalado e GITHUB é armazenado na nuvem)
Comandos básicos do git:
git config --global user.name "Seu nome" 
git config --global user.email "seuemail@email.com"
git clone url_do_repositório (clonar um repositório)
git status (verificar o status do repositório local)
git add . (adiciona ao repositório local)
git commit -m "tutorial" (documentar as alterações)
git push (enviar ao repositório GitHub)
git pull (receber, sincronizar as informações do repositório) no PC

Gerar token GitHub
1) Settings
2) Developer Settings
3) Token classic
4) Gerar o token selecionando tudo, guardar o token
___________________________________________________________________________________
12/09 > Boas práticas na programação
1 - Cabeçalho de documentação 
/** 
     Exemplos: Nomes dos projetos ou descrições de classe ou função
     @author Wellington R. Cruz
     @version 1.0
/*

2 - Nomes de arquivos, variáveis, funções, classes, etc
Regras (clean code):
- Declarar nomes que tenham relação com problema
- Não usar espaço, "ç" , acentos e caracteres especais para declaração de nomes (erros internos no programa)
- Só classes iniciam com letras maiúscula
- Não iniciar um nome com número 
- Quando for declarar dois nomes usar a técnica do camelo conhecido como:
 (camel case) - Usar uma letra maiúscula na segunda palavra
 Exemplo:
 nomecliente -> nomeCliente
________________________________________________________________________________________________________________
Comandos básicos do MS-DOS:
cls -> limpar a telaa
dir -> listar arquivos e diretórios
cd nome _diretório -> entrar no diretório
cd .. -> voltar para o diretório anteriror




 Node > É uma plataforma que permite a execução do JavaScript fora do navegador de internet (browser)
https://nodejs.org/pt  (Sempre usar a versão LTS Longo termo de serviço)

Comando básicos:
node -v (versão do node) (Ele aumenta as funcionalidade no JavaScript)

Gerenciador de pacotes para o node (acrescenta soluções, biblioteca)
Obs: NPM está relacionado a pasta do projeto, ou seja, os pacotes são instalados na raiz do projeto e não no sistema operacional
Npn -v  (versão do npm)

npm LS (listar pacotes instalados)

npn init (iniciar um novo projeto Java Script) ex: gera um arquivo aonde temos um novo projeto.

npm i nome_do_pacote (instalar um novo pacote)
npm r nome_do_pacote (remover um pacote)

   |____packge.json

   json > (JavaScript Object Notation) = JavaScript orientado a objetos.
________________________________________________________________________________________________________________

13/09 
Variáveis e constante:

Uma variável é um espaço na memória do computador onde armazenamos dados que podem ser utilizados e modificados durante a execução de um programa. O nome "variável" vem do fato de que o valor armazenado pode variar ao longo do tempo, conforme o programa roda.

Por que usar variáveis?
Para guardar informações que você vai precisar mais tarde.
Para realizar cálculos ou tomar decisões baseadas em diferentes valores.

Uma constante é como uma variável, mas com uma diferença importante: uma vez que você define o valor de uma constante, 
ele não pode ser alterado durante a execução do programa.

Por que usar constantes?
Segurança: Se você sabe que um valor não deve ser alterado em seu programa, usar uma constante evita erros.
Legibilidade: Quando você usa uma constante, deixa claro para quem está lendo o código que aquele valor é fixo e importante.

Boas práticas: Em muitos casos, é recomendado usar constantes sempre que possível para valores que não precisam mudar, facilitando a manutenção do código.

As duas primeiras linhas é para limpar a memória, logo após, executar.

Nas linguagens de programção as variáveis são tipadas ou dinamicamente tipadas

Existem 3 tipos de variáveis:
String -> Armazena caracteres e números
Number -> Armazena números inteiros e não inteiros
Boolean -> true | false

ATENÇÃO: No JS (JavaScript) uma variável pode ser criada usando let ou var
Var (Obsoleto e inseguro), usar sempre o let

________________________________________________________________________________________________________________

Comandos JavaScript (Sintaxe = forma que você escreve)
console.log() -> escrever no console
console.clear -> limpar a tela do console
const -> criar (declarar) uma vconstante
let -> criar (declarar) uma variável
typeof() -> verificar o tipo de varivável
_________________________________________________________________________________________________________________

Atividades: Lista de exercicios
16) Cálculo da porcentagem de um valor:
Desenvolva um programa que calcule uma porcentagem de um valor, dado o valor total e o percentual.

Regra de 3:

10% de 200 = 20

200 ------ 100%
valor ----  10%

valor x 100 = 200 x 10

         200 x 10       2000
valor = ___________ =  ______ = 20
            100          100


x% de y = valor

Y --------- 100%
valor ----   X

valor x 100 = Y x X

         Y x X    
valor = ________ 
          100    

// variáveis
x, y, valor

// entrada
x, y

// processamento
valor = (x * y) / 100

// saída
valor
________________________________________________________________________________________________________________

Estrutura de controle
- condicionais
- laços de repetições

Estruturas de controle condicionais

if (condição) {
   // condição verdadeira
} else {
   //condição falsa
}
   
   Observações:
   1) Uma condição nunca pode ser verdadeira e falsa simultaneamente.
   2) No uso do if-else sempre uma das condições será processada.

   switch (uso de variável numérica (número inteiro))

   switch (variável) {
      case 1:
         // código caso o valor da variável seja 1
      case 2:  
         // código caso o valor da variável seja 2
         break
      default:
         // opcional, o código será executado se nenhum caso for definido
         break
   }

   "Estrtura condicionais, if e else, switch e case, random numbers"